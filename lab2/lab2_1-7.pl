%Задание 1. Предикат удовлетворен, если список L3 является 
%конкатенацией (слиянием) списков L1 и L2
concat(L1, L2, L3) :- append(L1, L2, SUM), SUM = L3.


%Задание 2. Предикат удовлетворен, если список L2(L1) является 
%инверсией списка L1(L2).
invert(L1, L2) :- reverse(L1, INV), INV = L2, !.


%Задание 3. Предикат удовлетворен, если список L2 содержит 
%все элементы L1 без повторений.
uniq(L1, L2) :- var(L1), L1 = L2, !.
uniq(L1, L2) :- list_to_set(L1, SET), SET = L2.


%Задание 4. Предикат удовлетворен, если список L3 содержит 
%все элементы списка L1 и те элементы из списка L2, которых нет в L1. 
ucat(L1, L2, L3) :- var(L2), subtract(L3, L1, Lnew), L2 = Lnew, !.
ucat(L1, L2, L3) :- var(L1), subtract(L3, L2, Lnew), L1 = Lnew, !.

ucat(L1, L2, L3) :- subtract(L2, L1, L), append(L1, L, L3).


%Задание 5. Предикат удовлетворен, если i-ый элемент списка L3 
%представляет собой результат применения инфиксной операции Op 
%к i-ым элементам списков L1 и L2
mapop(_, [], [], []) :- !.
mapop(Op, [H1|T1], [H2|T2], [HR|TR]) :- Functor=..[Op,H1,H2], call(HR is Functor), mapop(Op,T1,T2,TR).


%Задание 6. Предикат удовлетворен, если L1 есть многоуровневый список 
%произвольных элементов, а L2 - одноуровневый список тех же элементов.
unbr([], []) :- !.
unbr([H|T], L2) :- !, unbr(H, FlatH), unbr(T, FlatT), concat(FlatH, FlatT, L2).
unbr(L, [L]).


%Задание 7. редикат удовлетворен, если L1 есть список списков чисел 
%(произвольной длины), а L2 - список сумм чисел во вложенных списках. 
msum(L1, L2) :- msum(L1, [], L2).
msum([], RES, L2) :- invert(RES, L2), !.
msum([H|T], Acc, L2) :- sum_list(H, S), msum(T, [S|Acc], L2).

sum_list([], 0).
sum_list([H|T], Sum) :- sum_list(T, Sum1), Sum is Sum1 + H.
